import os

class ToDoList:
    def __init__(self, filename="tasks.txt"):
        self.filename = filename
        self.tasks = self.load_tasks()

    def load_tasks(self):
        if os.path.exists(self.filename):
            with open(self.filename, "r") as file:
                return [line.strip() for line in file.readlines()]
        return []

    def save_tasks(self):
        with open(self.filename, "w") as file:
            file.write("\n".join(self.tasks))

    def add_task(self, task):
        self.tasks.append(task)
        print(f"Task added: {task}")

    def remove_task(self, task_index):
        try:
            removed = self.tasks.pop(task_index)
            print(f"Task removed: {removed}")
        except IndexError:
            print("Invalid task number.")

    def show_tasks(self):
        if not self.tasks:
            print("No tasks in the list!")
        else:
            print("\nTo-Do List:")
            for i, task in enumerate(self.tasks):
                print(f"{i + 1}. {task}")

    def run(self):
        while True:
            print("\nMenu:")
            print("1. Show tasks")
            print("2. Add task")
            print("3. Remove task")
            print("4. Save and exit")
            choice = input("Choose an option: ")

            if choice == "1":
                self.show_tasks()
            elif choice == "2":
                task = input("Enter a new task: ")
                self.add_task(task)
            elif choice == "3":
                self.show_tasks()
                try:
                    task_index = int(input("Enter the task number to remove: ")) - 1
                    self.remove_task(task_index)
                except ValueError:
                    print("Please enter a valid number.")
            elif choice == "4":
                self.save_tasks()
                print("Tasks saved. Goodbye!")
                break
            else:
                print("Invalid choice, try again.")

if __name__ == "__main__":
    todo = ToDoList()
    todo.run()
